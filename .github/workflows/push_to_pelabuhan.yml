name: Build then Push to Registry

# Trigger on Github Release https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/managing-releases-in-a-repository
# Github release will create new git tag
# but git push origin --tag will not trigger this action
on:
  release:
    types: [published]

# A workflow run is made up of one or more jobs that can run sequentially (with needs) or in parallel
jobs:
  # We use 2 jobs: continous-integrations and docker-build
  # docker-build will run after continous-integrations success

  continous-integrations:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Run your CI script before build docker image  
      - name: Build and Test
        run: # make install && \
             # make test && \
             # make coverage && \
             # make cleanup \
             echo "Simulate install, test and build "

  docker-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Make sure the code is tested before build docker
    needs: continous-integrations

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
 
      # Create and gather metadata
      - name: Get Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      - name: Prepare Version and Tag
        id: prep
        env:
          ORGANIZATION: roadrunner # example 
          APP_NAME: k6 # example 
        run: |
          set -e
          VERSION=$(git describe --tags --abbrev=0) # will fail if never tagged
          DOCKER_IMAGE=${ORGANIZATION}/${APP_NAME}
          
          TAGS=${DOCKER_IMAGE}:$VERSION
          
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          
      # Deploy to docker registry
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Docker Registry
        # if: github.event_name == 'release'
        uses: docker/login-action@v1 
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          # push: ${{ github.event_name == 'release' }} 
          push: true
          tags: ${{ secrets.REGISTRY }}/${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
